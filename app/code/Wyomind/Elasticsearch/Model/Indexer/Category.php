<?php

/**
 * Copyright Â© 2016 Wyomind. All rights reserved.
 * See LICENSE.txt for license details.
 */

namespace Wyomind\Elasticsearch\Model\Indexer;

use Magento\Catalog\Model\Category as CategoryObject;
use Magento\Catalog\Model\ResourceModel\Category\Collection as CategoryCollection;
use Magento\CatalogUrlRewrite\Model\CategoryUrlRewriteGenerator;

class Category extends AbstractIndexer
{

    /**
     * @param int $storeId
     * @param array $ids
     * @return \Generator
     */
    public function export(
        $storeId,
        $ids = []
    )
    {


        $this->handleLog("");
        $this->handleLog("<comment>Indexing categories for store id: " . $storeId . "</comment>");

        $this->eventManager->dispatch('wyomind_elasticsearch_category_export_before', ['store_id' => $storeId, 'ids' => $ids]);

        $categories = [];


        $defaultStore = $this->storeManager->getStore();
        $store = $this->storeManager->getStore($storeId);
        $attributesConfig = $this->indexerHelper->getEntitySearchableAttributes('category', $store);
        $rootCategoryId = $store->getRootCategoryId();

        /** @var CategoryCollection $collection */
        $collection = $this->createCategoryCollection()
            ->setStoreId($store->getId())
            ->addIsActiveFilter()
            ->addAttributeToSelect($attributesConfig)
            ->addAttributeToFilter('path', ['like' => "1/{$rootCategoryId}/%"]);

        // don't use : $collection->addUrlRewriteToResult();
        // because it use the current store id
        // ( very bad when saving a category in the backend ! )
        $collection->joinTable(
            'url_rewrite', 'entity_id = entity_id', ['request_path'], sprintf(
            '{{table}}.is_autogenerated = 1 AND {{table}}.store_id = %d AND {{table}}.entity_type = \'%s\'', $storeId, CategoryUrlRewriteGenerator::ENTITY_TYPE
        ), 'left'
        );

        $storeUrl = str_replace(["http://", "https://"], "", $store->getBaseUrl());
        $defaultStoreUrl = str_replace(["http://", "https://"], "", $defaultStore->getBaseUrl());

        $this->handleLog("<info>" . count($collection) . " categories found</info>");
        foreach ($collection as $category) {
            $category->setStoreId($storeId);

            $url = $category->getUrl();

            //fix for the store url
            if ($storeUrl != $defaultStoreUrl) {
                $url = str_replace($defaultStoreUrl, $storeUrl, $url);
            }

            $coreHelper = $this->objectManager->create(\Wyomind\Core\Helper\Data::class);
            if ($coreHelper->getStoreConfig("web/url/use_store", $storeId)) {
                $newUrl = $url;
                if ($defaultStore->getCode() != $store->getCode() && preg_match("#(https?://)([^/]+)/(" . $defaultStore->getCode() . ")/#", $url)) {
                    $newUrl = preg_replace("#(https?://)([^/]+)/(" . $defaultStore->getCode() . ")/#", '${1}${2}/' . $store->getCode() . '/', $url);
                    if ($newUrl == $url) {
                        $newUrl = preg_replace("#(https?://)([^/]+)/#", '${1}${2}/' . $store->getCode() . '/', $url);
                    }
                } elseif (!preg_match("#(https?://)([^/]+)/(" . $store->getCode() . ")/#", $url)) {
                    $newUrl = preg_replace("#(https?://)([^/]+)/#", '${1}${2}/' . $store->getCode() . '/', $url);
                }
                $url = $newUrl;
            }

            /** @var CategoryObject $category */
            $categories[$category->getId()] = array_merge(
                [
                    \Wyomind\Elasticsearch\Helper\Config::CATEGORIES_ID => (int)$category->getId(),
                    \Wyomind\Elasticsearch\Helper\Config::CATEGORIES_URL => $url,
                    \Wyomind\Elasticsearch\Helper\Config::CATEGORIES_PATH => $this->categoryHelper->getCategoryPathName($category),
                    \Wyomind\Elasticsearch\Helper\Config::CATEGORIES_PATH . "_plain" => str_replace(' > ', ' ', $this->categoryHelper->getCategoryPathName($category)),
                ], $category->toArray($attributesConfig)
            );
        }
        $this->handleLog("<info>" . count($collection) . " categories indexed</info>");
        $this->handleLog("");

        yield $categories;

        $this->eventManager->dispatch('wyomind_elasticsearch_category_export_after', ['store_id' => $storeId, 'ids' => $ids]);
    }

}
